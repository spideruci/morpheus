{"version":3,"sources":["components/routes/About.js","components/logic/morpheusAPI.js","components/visualizations/MatrixVisualization.js","components/common/FilterMenu.js","components/common/Menu.js","components/common/ResultTextBox.js","components/filters/filter_utils.js","components/filters/test_filters.js","components/filters/method_filters.js","components/filters/data_processor.js","components/filters/sorting.js","components/routes/TestMatrixView.js","components/common/Footer.js","components/common/Header.js","components/common/navbar.js","App.js","index.js"],"names":["About","useState","content","setContent","useEffect","axios","get","process","then","res","data","md_content","catch","console","error","className","source","fetchCoverage","project_name","json","response","methods","coverage","map","m","get_id","method_id","to_string","package_name","class_name","method_decl","get_cluster","hasOwnProperty","cluster_id","get_color","tests","t","test_id","method_name","edges","e","get_x","get_y","MatrixVisualization","props","ref","React","createRef","state","width","height","margin","top","left","right","bottom","labelToggle","createMatrix","bind","createTestMatrixView","update","onMethodClick","onTestClick","onRightClick","current","x","this","y","length","x_labels","y_labels","nodes","log","forEach","edge","index","highlight","push","parseInt","z","window","addEventListener","setTimeout","setState","parentElement","offsetWidth","offsetHeight","prevProps","prevState","snapshot","isEqual","node","svg","select","w","h","attr","zoom1","zoom","on","transform","call","vis_width","vis_height","xRange","scalePoint","padding","range","xScale","copy","domain","label","xLabel","yRange","yScale","yLabel","createTickFormatter","labelInterval","i","step","x_tick_interval","y_tick_interval","x_toggle","y_toggle","xAxis","axisTop","tickFormat","scale","yAxis","axisLeft","transition","duration","ease","easeLinear","rectWidth","rectHeight","matrixNodes","selectAll","join","enter","append","d","exit","remove","Math","max","text","xLabelObject","find","methodLabel","classLabel","yLabelObject","testLabel","style","tickWdith","xTicks","scaleOrdinal","schemeSet3","Array","from","Set","colorX","tickHeight","yTicks","colorY","xlabel","ylabel","g","id","Component","FilterMenu","entries","display","event","user_input","target","value","filter","item","toLowerCase","includes","title","type","placeholder","onKeyUp","filterFunction","onChange","onClick","entry","key","Menu","description","reset","updateReset","setValue","tooltip","Tooltip","line","fontSize","ResultTextBox","idx","readOnly","create_coverage_map","get_key","get_value","test_id_map","Map","has","method_ids","add","set","filter_by_test_passed","current_state","_","test_filter","predicate","new_edges","test_ids","test","new_state","TEST_RESULT","PASS","info","test_result","FAIL","filter_by_coexecuted_tests","identifier","test_cases","filter_test","undefined","filtered_test_id","filtered_methods","filtered_edges","filter_by_test_type","all_data","test_type","filter_type","TEST_TYPES","UNIT","p","c","size","INTEGRATION","SYSTEM","map_method_id","new_tests","new_test_ids","test_to_meth_map","package_set","class_set","method","test_type_filter","filter_method_by_number_of_times_tested","method_id_map","filter_by_coexecuted_methods","filter_method","filtered_method_id","filtered_tests","FunctionMap","fmap","get_map","function_id","func","args","delete","wrapped_func","sort_by_coverage_X","list","x_map","sort","e1","e2","id1","id2","size1","size2","sort_by_coverage_Y","y_map","color_by_test_type","boo","random","test_id_to_type_map","array","color_by_test_result","sort_by_cluster_X","sort_by_cluster_Y","sort_by_suspciousness","suspciousness_map","test_result_map","result","total_tests_failed","total_tests_passed","elem","passed","failed","suspiciousness","s1","s2","TestMatrixView","selectedProject","history","projects","commits","expanded","isVisible","currentMethod","anchor","current_method_id","coloring","backInTime","onProjectChange","setMethodAnchor","new_history","slice","selectedCommit","current_filter_map","filtered_data","cloneDeep","process_data","handleChange","panel","isExpanded","new_filter_map","add_function","concat","preventDefault","Accordion","AccordionSummary","expandIcon","aria-controls","AccordionDetails","Footer","href","alt","src","Header","Navbar","to","App","basename","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ef5ba32d.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport axios from 'axios'\nimport './About.scss';\n\nconst About = () => {\n    let [ content, setContent ] = useState(null)\n\n    useEffect(() => {\n        axios.get(`${process.env.PUBLIC_URL}/content/about.md`)\n            .then(res => res.data)\n            .then(md_content => setContent(md_content))\n            .catch(console.error);\n        }\n    )\n    return (\n        <div className=\"content-wrapper\">\n            <ReactMarkdown source={content} />\n        </div>\n    )\n}\n\nexport default About;\n","import { json } from 'd3';\n\nexport const fetchProjects = () => {\n    let projects = [\n        { key: 0, value: 'commons-cli-experiment-9722ec17bf9dbd1deab299bdd6dfe038fedae3bd' },\n        { key: 1, value: 'jpacman-framework-2434427914fa957f65617a9e794510f0c6ada9f9' },\n        { key: 2, value: 'commons-io-29b70e156f9241b0c3e25896c931d1ef8725ad66' },\n        { key: 3, value: 'jsoup-89580cc3d25d0d89ac1f46b349e5cd315883dc79' },\n        { key: 4, value: 'maven-7a4b77b582913aad0ee941df8e86a5b83bc3eec8' } \n    ]\n    return projects;\n}\n\nexport const fetchCoverage = (project_name) => {\n    return json(`${process.env.PUBLIC_URL}/resources/${project_name}.json`)\n        .then((response) => {\n            return {\n                methods: response.coverage.methods.map(m => {\n                    m.get_id = () => m.method_id;\n                    m.to_string = () => `${m.package_name}.${m.class_name} ${m.method_decl}`;\n                    m.get_cluster = () => m.hasOwnProperty('cluster_id') ? m.cluster_id : 0;\n                    m.get_color = () => m.package_name\n                    return m;\n                }),\n                tests: response.coverage.tests.map(t => {\n                    t.get_id = () => t.test_id;\n                    t.to_string = () => `${t.class_name} ${t.method_name}`;\n                    t.get_cluster = () => t.hasOwnProperty('cluster_id') ? t.cluster_id : 0;\n                    t.get_color = () => t.class_name\n                    return t;\n                }),\n                edges: response.coverage.edges.map(e => {\n                    e.get_color = () => {\n                        switch (e[\"test_result\"]) {\n                            case \"P\":\n                                return \"#03C03C\";\n                            case \"F\":\n                                return \"#FF1C00\";\n                            default:\n                                return \"black\";\n                        }\n                    }\n                    e.get_x = () => e.method_id;\n                    e.get_y = () => e.test_id;\n\n                    return e;\n                }),\n            }\n        })\n        .catch(console.error);\n}","import React, { Component } from 'react';\nimport { axisTop, axisLeft } from 'd3-axis';\nimport { scalePoint, scaleOrdinal } from 'd3-scale';\nimport { select } from 'd3-selection';\nimport { transition } from 'd3-transition';\nimport { easeLinear } from 'd3-ease';\nimport { schemeSet3 } from 'd3-scale-chromatic';\nimport { isEqual } from 'lodash';\nimport { zoom } from 'd3-zoom';\n\nclass MatrixVisualization extends Component {\n    constructor(props) {\n        super();\n\n        this.ref = React.createRef();\n\n        this.state = {\n            width: 0,\n            height: 0,\n        }\n\n        this.margin = {\n            top: 50,\n            left: 50,\n            right: 0,\n            bottom: 0\n        }\n\n        this.labelToggle = props.hasOwnProperty('labelToggle') ? props['labelToggle'] : false;\n\n        this.createMatrix = this.createMatrix.bind(this);\n        this.createTestMatrixView = this.createTestMatrixView.bind(this);\n        this.update = this.update.bind(this);\n\n        // Set all methods passed through properties here (we don't use bind because we want to make use of the parent this object.)\n        this.onMethodClick = props.onMethodClick;\n        this.onTestClick = props.onTestClick;\n        this.onRightClick = props.onRightClick;\n    }\n\n    createMatrix() {\n        const current = {\n            x: this.props.x,\n            y: this.props.y,\n            edges: this.props.edges,\n        }\n\n        if (current.x.length === 0 || current.y.length === 0) {\n            return {\n                x_labels: [],\n                y_labels: [],\n                nodes: []\n            };\n        }\n\n        let edges = []\n        console.log(current);\n\n        current.edges.forEach((edge, index) => {\n            if (!(edge.get_y() === null || edge.get_x() === null)){\n                const highlight = edge.hasOwnProperty('highlight') ? edge.highlight : false;\n\n                edges.push({ \n                    x: parseInt(edge.get_x()),\n                    y: parseInt(edge.get_y()),\n                    z: edge.get_color(),\n                    highlight: highlight});\n            }\n        });\n\n        return {\n            x_labels: current.x,\n            y_labels: current.y,\n            nodes: edges\n        };\n    }\n\n    componentDidMount() {\n        window.addEventListener(\"resize\", () => {\n            setTimeout(500);\n            this.setState({\n                width: this.ref.current.parentElement.offsetWidth,\n                height: this.ref.current.parentElement.offsetHeight\n            }, this.update)\n        });\n\n        this.createTestMatrixView();\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.ref.current !== null) {\n            const width = this.ref.current.parentElement.offsetWidth;\n            const height = this.ref.current.parentElement.offsetHeight;\n            if (this.state.width !== width || this.state.height !== height) {\n                console.log(\"COMPONENT DID UPDATE \")\n                this.setState({\n                    width: width,\n                    height: height,\n                }, this.update)\n            }\n        }\n        \n\n        if ((!isEqual(prevProps.x, this.props.x)) || (!isEqual(prevProps.y, this.props.y)) ) {\n            this.labelToggle = this.props.labelToggle;\n            this.onMethodClick = this.props.onMethodClick;\n            this.onTestClick = this.props.onTestClick;\n            this.update()\n\n        }\n    }\n\n    update () {\n        // Update viewBox to the state width and height\n        const node = this.ref.current;\n        let svg = select(node);\n\n        let data = this.createMatrix();\n\n        let w = data.x_labels.length * 3;\n        let h = data.y_labels.length * 3;\n\n        svg.attr(\"viewBox\", [0, 0, this.state.width, this.state.height]);\n\n        let zoom1 = zoom().on('zoom', e => {\n            select('svg g').attr('transform', e.transform);\n        });\n\n        svg.call(zoom1);\n\n        select('svg g').attr('transform', 'translate(0,0) scale(1.0)');\n\n        let vis_width = w - this.margin.left - this.margin.right -10;\n        let vis_height = h - this.margin.top - this.margin.bottom -10;\n\n        // Scales for X-axis\n        // TODO how to refactor the following so we can make use of a single scale instead of xScale and xLabel? \n        let xRange = scalePoint()\n            .padding(0.5)\n            .range([0, vis_width])\n\n        let xScale = xRange.copy()\n            .domain(data.x_labels.map((label) => parseInt(label.get_id())));\n\n        let xLabel = xRange.copy()\n            .domain(data.x_labels.map((label) => label.to_string()));\n\n        // Scales for Y-axis\n        // TODO how to refactor the following so we can make use of a single scale instead of yScale and yLabel?\n        let yRange = scalePoint()\n            .padding(0.5)\n            .range([0, vis_height])\n\n        let yScale = yRange.copy()\n            .domain(data.y_labels.map((label) => label.get_id()));\n\n        let yLabel = yRange.copy()\n            .domain(data.y_labels.map((label) => label.to_string()));\n\n        if (xLabel.step() !== xScale.step()) {\n            // Meaning duplicate class_name.method_name entries\n            console.error(\"xLabel and xScale step are not equal...\")\n        }\n        if (yLabel.step() !== yScale.step()) {\n            // Meaning duplicate class_name.method_name entries\n            console.error(\"yLabel and yScale step are not equal...\")\n        }\n\n        // Create tick format function, returns a function using the passed parameters.\n        function createTickFormatter(labelToggle, labelInterval) {\n            return  (label, i) => {\n                label = \"\";  \n                if (!labelToggle) {\n                    label = \"\";   \n                }\n\n                return i % labelInterval !== 0 ? \" \" : label;\n            }\n        }\n\n        // Create both axis\n        const max_labels = 20;\n        const x_tick_interval = data.x_labels.length <= max_labels ? 1 : data.x_labels.length / max_labels;\n        const y_tick_interval = data.y_labels.length <= max_labels ? 1 : data.x_labels.length / max_labels;\n\n        const x_toggle = data.x_labels.length <= max_labels && this.labelToggle;\n        const y_toggle = data.y_labels.length <= max_labels && this.labelToggle;\n\n        let xAxis = axisTop()\n            .tickFormat(createTickFormatter(x_toggle, x_tick_interval))\n            .scale(xLabel);\n\n        let yAxis = axisLeft()\n            .tickFormat(createTickFormatter(y_toggle, y_tick_interval))\n            .scale(yLabel);\n\n        const t = transition()\n            .duration(0)\n            .ease(easeLinear);\n\n        let rectWidth = xLabel.step()\n        let rectHeight = yLabel.step()\n\n        let matrixNodes = select(\"g.testmatrix\")\n                .attr(\"transform\", `translate(${this.margin.left}, ${this.margin.top})`)\n                .selectAll('.cell')\n                .data(data.nodes)\n                .join(\n                    enter => enter.append(\"rect\").call(enter => enter\n                        .transition(t)\n                            .attr(\"x\", (d) => xScale(d.x) - rectWidth/2)\n                        .transition(t)\n                            .attr(\"y\", (d) => yScale(d.y) - rectHeight/2)\n                    ),\n                    update => update.call(update => update\n                        .transition(t)\n                            .attr(\"x\", (d) => xScale(d.x) - rectWidth / 2)\n                        .transition(t)\n                            .attr(\"y\", (d) => yScale(d.y) - rectHeight / 2)\n                    ),\n                    exit => exit.remove()\n                )\n                .attr(\"class\", \"cell\")\n                .attr(\"fill\", (d) => d.z)\n                .attr(\"width\", rectWidth)\n                .attr(\"height\", rectHeight)\n                .attr(\"rx\", Math.max(1, xScale.step()/2))\n                .attr(\"stroke\", (d) => d.highlight ? 'black' : null)\n                .attr(\"stoke-width\", (d) => d.highlight ? '1px' : '0px');\n        \n        matrixNodes.selectAll(\"*\").remove();\n        matrixNodes.append(\"title\")\n                    .text(d => {\n                        let xLabelObject = data.x_labels.find(e => e.method_id === d.x);\n\n                        let methodLabel = xLabelObject?.method_name ?? \"unknownMethod\";\n                        let classLabel = xLabelObject?.class_name ?? \"UnknownClass\";\n\n                        let yLabelObject = data.y_labels.find(e => e.test_id === d.y);\n                        let testLabel = yLabelObject?.method_name ?? \"unknown test\";\n                        \n                        return `${classLabel}.${methodLabel} tested by ${testLabel}`;\n                    });\n\n        // Tooltip\n        let tooltip = svg.select(\".tooltip\")\n            .style(\"visibility\", 'hidden')\n\n        tooltip.append(\"text\")\n            .attr(\"id\", \"tooltip-text\")\n            .style(\"font-size\", \"12px\")\n\n        // Add X and Y axis to the visualization\n        select(\"g.x-axis\")\n            .attr(\"transform\", `translate(${this.margin.left}, ${this.margin.top})`)\n            .call(xAxis)\n            .selectAll(\"line\")\n            .style(\"stroke\", \"white\")\n            .style(\"stroke-width\", \"0.0\");\n        \n        select(\"g.x-axis\")\n            .select(\"path\")\n            .style(\"stroke\", \"grey\")\n            .style(\"stroke-width\", \"0.5\");\n\n\n        const colorX = (d) => {\n            const scale = scaleOrdinal(schemeSet3).domain(Array.from(new Set(data.x_labels.map((d) => d.get_color()))));\n            return scale(d);\n        }\n\n        let tickWdith = rectWidth - (0.1 * rectWidth);\n\n        // Add circler around ticks\n        let xTicks = select(\"g.x-axis\")\n            .selectAll('.axis-dots-x')\n            .data(data.x_labels)\n            .join(\n                enter => enter.append('rect').call(enter => enter\n                    .attr('x', d => {\n                        return `${xLabel(d.to_string()) - (tickWdith/2)}px`\n                    })\n                ),\n                update => update.call(update => update\n                    .attr('x', (d) => `${xLabel(d.to_string()) - (tickWdith/2)}px`)\n                ),\n                exit => exit.remove()\n            )\n            .attr(\"class\", \"axis-dots-x\")\n            .attr('y', -10)\n            .attr('height', 10)\n            .attr('width', tickWdith)\n            .style('stroke', 'black')\n            .style('stroke-width', '0.0')\n            .style('fill', (d) => colorX(d.get_color()))\n            .on('click', this.onMethodClick)\n            .on('contextmenu', this.onRightClick);\n        \n        xTicks.selectAll(\"*\").remove();\n        xTicks.append(\"title\").text(d => `${d.class_name}.${d.method_name}`);\n        \n        select(\"g.y-axis\")\n            .attr(\"transform\", `translate(${this.margin.left}, ${this.margin.top})`)\n            .call(yAxis)\n            .selectAll(\"line\")\n            .style(\"stroke\", \"white\")\n            .style(\"stroke-width\", \"0.0\");\n\n        select(\"g.y-axis\")\n            .select(\"path\")\n            .style(\"stroke\", \"grey\")\n            .style(\"stroke-width\", \"0.5\");\n\n        const colorY = (d) => {\n            const scale = scaleOrdinal(schemeSet3).domain(Array.from(new Set(data.y_labels.map((d) => d.get_color()))));\n            return scale(d);\n        }\n\n        let tickHeight = rectHeight - (0.1 * rectHeight);\n\n        let yTicks = select(\"g.y-axis\")\n            .selectAll('.axis-dots-y')\n            .data(data.y_labels)\n            .join(\n                enter => enter.append('rect').call(enter => enter\n                    .attr('y', d => {\n                        return `${yLabel(d.to_string()) - (tickHeight/2)}px`\n                    })\n                ),\n                update => update.call(update => update\n                    .attr('y', (d) => `${yLabel(d.to_string()) - (tickHeight/2)}px`)\n                ),\n                exit => exit.remove()\n            )\n            .attr(\"class\", \"axis-dots-y\")\n            .attr('x', -10)\n            .attr('width', 10)\n            .attr('height', tickHeight)\n            .style('stroke', 'black')\n            .style('stroke-width', '0')\n            .style('fill', (d) => colorY(d.get_color()))\n            .on('click', this.onTestClick);\n        \n        yTicks.selectAll(\"*\").remove();\n        yTicks.append(\"title\")\n            .text(d => {\n                \n                return d.to_string();\n            });\n\n        // text label for the x axis\n        svg.select(\".xlabel\")\n            .attr(\"x\", this.state.width / 2)\n            .attr(\"y\", 11)\n            .style(\"text-anchor\", \"middle\")\n            .text(this.props.xlabel);\n\n        // text label for the y axis\n        svg.select(\".ylabel\")\n            .attr(\"transform\", \"rotate(-90)\")\n            .attr(\"y\", 1)\n            .attr(\"x\", -this.state.height / 2)\n            .attr(\"dy\", \"0.7em\")\n            .style(\"text-anchor\", \"middle\")\n            .text(this.props.ylabel);\n    }\n\n    createTestMatrixView() {\n        const node = this.ref.current;\n\n        let svg = select(node);\n        svg.attr(\"viewBox\", [0, 0, this.state.width, this.state.height]);\n\n        let g = svg.append(\"g\");\n\n        g.append(\"g\").attr(\"class\", \"x-axis\");\n        g.append(\"g\").attr(\"class\", \"y-axis\");\n        g.append(\"g\").attr(\"class\", \"testmatrix\");\n        g.append(\"g\").attr(\"class\", \"tooltip\");\n\n        // Create empty labels, they are updated within the update function.\n        svg.append(\"text\").attr(\"class\", \"xlabel\");\n        svg.append(\"text\").attr(\"class\", \"ylabel\");\n    }\n\n    render() {\n        return (\n            <div id='visualization'>\n                <svg ref={this.ref}></svg>\n            </div>\n        )\n    }\n}\n\nexport default MatrixVisualization;","import React, { Component } from 'react'\nimport './FilterMenu.scss'\n\nclass FilterMenu extends Component {\n\n    constructor(props) {\n        super();\n\n        this.state = {\n            entries: props.entries,\n            display: props.entries,\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot){\n        if (prevProps.entries !== this.props.entries) {\n            this.setState({\n                entries: this.props.entries,\n                display: this.props.entries,\n            })\n        }\n    }\n\n    filterFunction(event) {\n        // Get entry list\n        const { entries } = this.state;\n\n        // Get typed input\n        const user_input = event.target.value;\n        if (user_input === \"\") {\n            this.setState({\n                display: this.state.entries,\n            })\n            return;\n        }\n\n        // Filter entry list based on what hsa been typed\n        const display = entries.filter(item => {\n            const method_str = item.to_string().toLowerCase();\n            return method_str.includes(user_input.toLowerCase());\n        })\n\n        // Repopulate the list based on what was typed.\n        this.setState({\n            display: display\n        })\n    }\n\n    render () {\n        return (\n            <div>\n                <span> {this.props.title} </span>\n                <div className=\"filtermenu\">\n                    <div className=\"dropdown-content\">\n                        <input type=\"text\" placeholder={\"Search...\"} onKeyUp={this.filterFunction.bind(this)}></input>\n                        <select onChange={this.props.onClick}>\n                            <option> -- select an option -- </option>\n                            {this.state.display.map((entry) => (\n                                <option key={entry.get_id()} value={entry.get_id()}>{entry.to_string()}</option>\n                            ))}\n                        </select>\n                    </div>\n                </div>\n            </div> \n        )\n    }\n}\n\nexport default FilterMenu;","import React, {useState, useEffect} from 'react'\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpIcon from '@material-ui/icons/Help';\nimport './Menu.scss'\n\nconst Menu = ({ title = \"\", description=[], onChange=(e) => console.log(e.target.value), entries = [], reset, updateReset}) => {\n    const [value, setValue] = useState(\"default\");\n\n    const handleChange = e =>{\n        if(reset === true){\n            updateReset();\n        }\n        setValue(e.target.value);\n        onChange(e); \n         \n    }\n\n    let tooltip = description.length === 0 ? null : (\n        <Tooltip\n            title={\n            <div className=\"content\"> {\n                description.map((line, index) => (<div key={index}>{line}</div>))}\n            </div>}>\n            <HelpIcon fontSize=\"small\" />\n        </Tooltip>\n    )\n    useEffect(() => {\n        if(reset) {\n            setValue(\"default\")\n        }\n      }, [reset]); // Only re-run the effect if reset changes\n\n    return (\n        <div className=\"menu-selector\">\n            <span>{title}: </span>\n            {tooltip}\n            <select value={value} onChange={handleChange}>\n                <option value=\"default\"> -- select an option -- </option>\n                {entries.map((entry) => (\n                    <option key={entry.key} value={entry.value}>{entry.value}</option>\n                    \n                ))}\n            </select>\n        </div>\n    )\n\n}\nexport default Menu;","import React from 'react'\nimport './ResultTextBox.scss'\n    \nconst ResultTextBox = (props) => {\n    return (\n        <div className=\"result-text-box\">\n            <span>{props.title}:</span>\n            <textarea value={props.entries.map((entry, idx) => `${idx + 1}. ${entry.to_string()}`).join('\\n')} readOnly />\n        </div>\n    )\n}\n\nexport default ResultTextBox;","export function create_coverage_map(edges, get_key, get_value) {\n    let test_id_map = new Map()\n\n    edges.forEach(edge => {\n        const key = get_key(edge)\n        const value = get_value(edge)\n\n        if (test_id_map.has(key)) {\n            //  Get current Set of methods test covers\n            let method_ids = test_id_map.get(key)\n\n            // Add new method id to set and update map\n            method_ids.add(value)\n            test_id_map.set(key, method_ids)\n\n        } else {\n            let method_ids = new Set();\n            method_ids.add(value);\n            test_id_map.set(key, method_ids)\n        }\n    });\n    return test_id_map;\n}","import { create_coverage_map } from './filter_utils'\n\nexport function filter_by_num_method_covered(current_state, _, value) {\n    const edges = current_state.edges;\n\n     // Map test_id to methods it covers\n    let test_id_map = create_coverage_map(edges, (e) => e.test_id, e => e.method_id);\n\n    const tests = current_state.y.filter((test) => {\n        const test_id = test.get_id();\n        return (value === 0) || (test_id_map.has(test_id) && (test_id_map.get(test_id).size >= value));\n    })\n\n    const filtered_edges = current_state.edges.filter((edge) => {\n        const test_id = edge.test_id;\n        return (value === 0) || (test_id_map.has(test_id) && (test_id_map.get(test_id).size >= value));\n    });\n\n    return {\n        x: current_state.x,\n        y: tests,\n        edges: filtered_edges,\n    }\n}\n\n\nexport function filter_by_test_passed(current_state, _, value) {\n    function test_filter(current_state, predicate) {\n        const methods = current_state.x;\n        const tests = current_state.y;\n        const edges = current_state.edges;\n\n        const new_edges = edges.filter(predicate)\n        const test_ids = new_edges.map(edge => edge.test_id)\n\n        const new_tests = tests.filter((test) => test_ids.includes(test.test_id))\n\n        return {\n            x: methods,\n            y: new_tests,\n            edges: new_edges,\n        }\n    }\n\n    let new_state;\n    switch (value) {\n        case TEST_RESULT.PASS:\n            console.info(`Filter all test methods that fail Index: ${value}, was chosen.`);\n            new_state = test_filter(current_state, (edge) => edge.test_result === \"P\")\n            break;\n        case TEST_RESULT.FAIL:\n            console.info(`Filter all test methods that pass Index: ${value}, was chosen.`);\n            new_state = test_filter(current_state, (edge) => edge.test_result === \"F\")\n            break;\n        default:\n            console.info(`No methods have been filtered. Index: ${value}, was chosen.`);\n            new_state = current_state;\n    }\n\n    return new_state;\n}\n\n\nexport function filter_by_coexecuted_tests(current_state, _, identifier) {\n    const current = current_state;\n\n    let methods = current.x;\n    let test_cases = current.y;\n    let edges = current.edges;\n\n    let filter_test = test_cases.find(test => test.to_string().includes(identifier));\n\n    if (filter_test === undefined) {\n        filter_test = test_cases.find(test => test.get_id() === parseInt(identifier));\n    }\n\n    if (filter_test === undefined) {\n        console.error(\"Filter Method was not found...\");\n        return current;\n    }\n\n    const filtered_test_id = filter_test.get_id();\n\n    const method_ids = edges.filter(edge => filtered_test_id === edge.test_id)\n        .map(edge => edge.method_id);\n\n    const filtered_methods = methods.filter(m => method_ids.includes(m.method_id))\n\n    let filtered_edges = edges.filter(\n        edge => method_ids.includes(edge.method_id) || edge.test_id === filtered_test_id)\n\n    filtered_edges.forEach( (edge) => {\n        if (edge.test_id === filtered_test_id) {\n            edge.highlight = true;\n        }\n    })\n\n    const test_ids = filtered_edges.map(edge => edge.test_id)\n\n    const filtered_tests = test_cases.filter(test => test_ids.includes(test.test_id));\n\n    return {\n        x: filtered_methods,\n        y: filtered_tests,\n        edges: filtered_edges\n    }\n}\n\nexport function filter_by_test_type(current_state, all_data, test_type) {\n    let filter_type;\n    switch (test_type) {\n        case TEST_TYPES.UNIT:\n            filter_type = (p, c) => c.size === 1;\n            break;\n        case TEST_TYPES.INTEGRATION:\n            filter_type = (p, c) => p.size === 1 && c.size > 1\n            break;\n        case TEST_TYPES.SYSTEM:\n            filter_type = (p, c) => p.size > 1;\n            break;\n        default:\n            return current_state;\n    }\n    return test_type_filter(current_state, all_data, filter_type);\n}\n\n\nfunction test_type_filter(current_state, all_data, filter) {\n    const methods = current_state.x;\n\n    let map_method_id = new Map();\n    methods.forEach((m) => {\n        map_method_id.set(m.method_id, m)\n    })\n\n    const edges = current_state.edges;\n    const test_to_meth_map = create_coverage_map(all_data.edges, e => e.test_id, e => e.method_id)\n\n    const tests = current_state.y;\n\n    let new_tests, new_edges, new_test_ids;\n\n    new_tests = tests.filter((t) => {\n        const test_id = t.test_id;\n        const method_ids = test_to_meth_map.get(test_id)\n        let package_set = new Set();\n        let class_set = new Set();\n\n        method_ids.forEach((id) => {\n            const method = map_method_id.get(id);\n            if (method === undefined) {\n                return;\n            }\n            package_set.add(`${method.package_name}`)\n            class_set.add(`${method.package_name}.${method.class_name}`)\n        });\n\n        return filter(package_set, class_set);\n    });\n\n    new_test_ids = new_tests.map(test => test.test_id);\n\n    new_edges = edges.filter((edge) => {\n        return new_test_ids.includes(edge.test_id)\n    });\n\n    return {\n        x: methods,\n        y: new_tests,\n        edges: new_edges,\n    }\n}\n\nexport const TEST_TYPES = {\n    UNIT: 'Unit',\n    INTEGRATION: 'Integration',\n    SYSTEM: 'System',\n}\n\nexport const TEST_RESULT = {\n    PASS: 'Only Pass',\n    FAIL: 'Only Fail',\n}\n","import { create_coverage_map } from './filter_utils'\n\nexport function filter_method_by_number_of_times_tested(current_state, _, value) {\n    const edges = current_state.edges;\n\n    // Map method_id to tests its covered by.\n    let method_id_map = create_coverage_map(edges, (e) => e.method_id, (e) => e.test_id)\n\n    const methods = current_state.x.filter((m) => {\n        const method_id = m.get_id();\n        return (value === 0) || (method_id_map.has(method_id) && (method_id_map.get(method_id).size >= value));\n    })\n\n    const filtered_edges = current_state.edges.filter((edge) => {\n        const method_id = edge.method_id;\n        return (value === 0) || (method_id_map.has(method_id) && (method_id_map.get(method_id).size >= value));\n    });\n\n    \n    return {\n        x: methods,\n        y: current_state.y,\n        edges: filtered_edges,\n    }\n}\n\n\nexport function filter_by_coexecuted_methods(current_state, _, identifier) {\n    const current = current_state;\n\n    let methods = current.x;\n    let test_cases = current.y;\n    let edges = current.edges;\n\n    let filter_method = methods.find(m => m.to_string().includes(identifier));\n\n    if (filter_method === undefined) {\n        filter_method = methods.find(m => m.get_id() === parseInt(identifier));\n    }\n\n    if (filter_method === undefined) {\n        console.error(\"Filter Method was not found...\");\n        return current;\n    }\n\n    const filtered_method_id = filter_method.get_id();\n\n    const test_ids = edges.filter(edge => filtered_method_id === edge.method_id)\n        .map(edge => edge.test_id);\n\n    const filtered_tests = test_cases.filter(test => test_ids.includes(test.test_id))\n\n    const filtered_edges = edges.filter(\n        edge => test_ids.includes(edge.test_id) || edge.method_id === filter_method.method_id)\n\n    filtered_edges.forEach((edge) => {\n        if (edge.method_id === filtered_method_id) {\n            edge.highlight = true;\n        }\n    })\n\n    const method_ids = filtered_edges.map(edge => edge.method_id)\n\n    const filtered_methods = methods.filter(method => method_ids.includes(method.method_id));\n\n    return {\n        x: filtered_methods,\n        y: filtered_tests,\n        edges: filtered_edges\n    }\n}","import {cloneDeep} from 'lodash';\n\nexport function process_data (data, fmap) {\n    let filtered_data = {\n        x: cloneDeep(data.x),\n        y: cloneDeep(data.y),\n        edges: cloneDeep(data.edges),\n    };\n    fmap.get_map().forEach((func, index) => {\n        filtered_data = func(filtered_data, data);\n    })\n    return filtered_data\n}\n\nexport class FunctionMap {\n    constructor(fmap) {\n        if (fmap !== undefined){\n            const m = fmap.get_map();\n            this.map = new Map(m);\n        } else {\n            this.map = new Map();\n        }\n    }\n\n    add_function(function_id, func, ...args) {\n        if (this.map.has(function_id)) {\n            this.map.delete(function_id);\n        }\n\n        const wrapped_func = (state, data) => func(state, data, ...args)\n        this.map.set(function_id, wrapped_func);\n    }\n\n    get_function(function_id) {\n        if (this.map.has(function_id)) {\n            return this.map.get(function_id)\n        }\n        return;\n    }\n\n    get_map(){\n        return this.map;\n    }\n}","import { create_coverage_map } from './filter_utils'\n\nexport function sort_by_coverage_X(current_state, all_data) {\n    const edges = current_state.edges;\n\n    let x = current_state.x;\n    let y = current_state.y;\n\n    let x_map = create_coverage_map(edges, (e) => e.get_x(), (e) => e.get_y())\n\n    function sort_array(list, map){\n        return list.sort((e1, e2) => {\n            const id1 = e1.get_id();\n            const id2 = e2.get_id();\n\n            const size1 = map.has(id1) ? map.get(id1).size : 0;\n            const size2 = map.has(id2) ? map.get(id2).size : 0;\n\n            if (size1 < size2) {\n                return 1;\n            }\n            else if (size1 > size2){\n                return -1;\n            }\n            else {\n                return 0;\n            }\n        })\n    }\n    return {\n        \"x\": sort_array(x, x_map),\n        \"y\": y,\n        \"edges\": edges,\n    }\n}\n\nexport function sort_by_coverage_Y(current_state, all_data) {\n    const edges = current_state.edges;\n\n    let x = current_state.x;\n    let y = current_state.y;\n\n    let y_map = create_coverage_map(edges, (e) => e.get_y(), (e) => e.get_x())\n\n    function sort_array(list, map) {\n        return list.sort((e1, e2) => {\n            const id1 = e1.get_id();\n            const id2 = e2.get_id();\n\n            const size1 = map.has(id1) ? map.get(id1).size : 0;\n            const size2 = map.has(id2) ? map.get(id2).size : 0;\n\n            if (size1 < size2) {\n                return 1;\n            }\n            else if (size1 > size2) {\n                return -1;\n            }\n            else {\n                return 0;\n            }\n        })\n    }\n\n    return {\n        \"edges\": edges,\n        \"x\": x,\n        \"y\": sort_array(y, y_map),\n    }\n}\n\nexport function color_by_test_type(current_state, all_data) {\n    const edges = current_state.edges;\n\n    let x = current_state.x;\n    let y = current_state.y;\n\n    if (x.length > 0) {\n        x[0].boo = Math.random(); // causes a state change; and hence a render\n    }\n\n    const test_to_meth_map = create_coverage_map(all_data.edges, e => e.test_id, e => e.method_id)\n\n    let test_id_to_type_map = new Map();\n\n    let map_method_id = new Map();\n    x.forEach((m) => {\n        map_method_id.set(m.method_id, m)\n    })\n\n    y.forEach(function(t, index, array) {\n        const test_id = t.test_id;\n        const method_ids = test_to_meth_map.get(test_id)\n        let package_set = new Set();\n        let class_set = new Set();\n\n        method_ids.forEach((id) => {\n            const method = map_method_id.get(id);\n            if (method === undefined) {\n                return;\n            }\n            package_set.add(`${method.package_name}`)\n            class_set.add(`${method.package_name}.${method.class_name}`)\n        });\n\n        if (package_set.size > 1) {\n            test_id_to_type_map.set(t.test_id, \"S\");\n        }\n        else if (package_set.size === 1 && class_set.size > 1) {\n            test_id_to_type_map.set(t.test_id, \"I\");\n        }\n        else if (class_set.size === 1) {\n            test_id_to_type_map.set(t.test_id, \"U\");\n        }\n        else {\n            test_id_to_type_map.set(t.test_id, \"\");\n        }\n    });\n\n    for (const edge of edges) {\n\n        const test_type = test_id_to_type_map.get(edge.test_id);\n        edge.test_type = test_type\n\n        edge.get_color = () => {\n            switch (edge.test_type) {\n                case \"S\":\n                    return \"#9033ff\";\n                case \"I\":\n                    return \"#eb8c06\";\n                case \"U\":\n                    return \"#02ae5e\";\n                default:\n                    return \"black\";\n            }\n        }\n    }\n\n    return {\n        \"edges\": edges,\n        \"x\": x,\n        \"y\": y,\n    }\n}\n\nexport function color_by_test_result(current_state, all_data) {\n    const edges = current_state.edges;\n\n    let x = current_state.x;\n    let y = current_state.y;\n\n    if (x.length > 0) {\n        x[0].boo = Math.random(); // causes a state change; and hence a render\n    }\n\n    for (const edge of edges) {\n        edge.get_color = () => {\n            switch (edge[\"test_result\"]) {\n                case \"P\":\n                    return \"#03C03C\";\n                case \"F\":\n                    return \"#FF1C00\";\n                default:\n                    return \"black\";\n            }\n        }\n    }\n\n    return {\n        \"edges\": edges,\n        \"x\": x,\n        \"y\": y,\n    }\n}\n\n\nexport function sort_by_cluster_X(current_state, all_data) {\n    let x = current_state.x;\n    const y = current_state.y;\n    const edges = current_state.edges;\n\n    return {\n        x: x.sort((e1, e2) => {\n            if (e1.get_cluster() < e2.get_cluster()){\n                return 1;\n            } else if(e1.get_cluster() > e2.get_cluster()) {\n                return -1\n            } else {\n                return 0;\n            }}),\n        y: y,\n        edges: edges,\n    }\n}\n\nexport function sort_by_cluster_Y(current_state, all_data) {\n    const x = current_state.x;\n    let y = current_state.y;\n    const edges = current_state.edges;\n\n    return {\n        x: x,\n        y: y.sort((e1, e2) => {\n            if (e1.get_cluster() < e2.get_cluster()) {\n                return 1;\n            } else if (e1.get_cluster() > e2.get_cluster()) {\n                return -1\n            } else {\n                return 0;\n            }\n        }),\n        edges: edges,\n    }\n}\n\nexport function sort_by_suspciousness(current_state, all_data) {\n    let x = current_state.x;\n    let y = current_state.y;\n    const edges = current_state.edges;\n\n    // suspiciousness map\n    let suspciousness_map = new Map();\n\n    // Create Maps One method id to test id and one test id to test result\n    let x_map = create_coverage_map(all_data.edges, (e) => e.method_id, (e) => e.test_id)\n    let test_result_map = new Map()\n\n    // Create a map of testing results 'test_id' --> result\n    all_data.edges.forEach(edge => {\n        const id = edge.test_id;\n        const result = edge.test_result === \"P\";\n        test_result_map.set(id, result)\n    });\n\n    // Compute the number tests passed/failed.\n    let total_tests_failed = 0;\n    let total_tests_passed = 0;\n\n    test_result_map.forEach((value, key) => {\n        if (value) {\n            total_tests_passed += 1;\n        } else {\n            total_tests_failed += 1;\n        }\n    });\n\n\n    // Tarantula Suspciousness calculation\n    function suspiciousness(method) {\n        let passed = 0;\n        let failed = 0;\n\n        if (!x_map.has(method.get_id())) {\n            return -1;\n        }\n\n        let tests = x_map.get(method.get_id())\n\n        // Compute passed/failed testcases\n        tests.forEach((test_id) => {\n            if (test_result_map.has(test_id) && test_result_map.get(test_id)) {\n                passed += 1;\n            } else {\n                failed += 1;\n            }\n        });\n\n        return (failed / total_tests_failed) / ((passed/total_tests_passed) + (failed/total_tests_failed))\n    }\n\n    // Sort based on suspiciosness of each test\n    function sort_array(list) {\n        return list.sort((e1, e2) => {\n            const s1 = suspciousness_map.get(e1.get_id())\n            const s2 = suspciousness_map.get(e2.get_id())\n\n                if (s1 < s2) {\n                    return 1;\n                } else if (s1 > s2){\n                    return -1\n                } else {\n                    return 0;\n                }\n            }\n        )\n    }\n\n    // If all tests fail or all tests pass don't compute suspciousness score, because it will fail.\n    if (total_tests_failed !== 0 && total_tests_passed !== 0) {\n        all_data.x.forEach((elem) => {\n            suspciousness_map.set(elem.get_id(), suspiciousness(elem));\n        });\n        x = sort_array(x);\n    }\n\n    return {\n        \"edges\": edges,\n        \"x\": x,\n        \"y\": y,\n    }\n}","import React, { Component } from 'react'\n\n// MorpheusAPI endpoints\nimport { fetchProjects, fetchCoverage } from '../logic/morpheusAPI';\n\n// Material UI components\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\n// Custom Components\nimport MatrixVisualization from '../visualizations/MatrixVisualization';\nimport FilterMenu from '../common/FilterMenu';\nimport Menu from '../common/Menu';\nimport ResultTextBox from '../common/ResultTextBox';\n\n// Style sheets\nimport './TestMatrixView.scss';\n\n//  Filter functions\nimport { filter_by_test_passed, filter_by_coexecuted_tests, filter_by_test_type, TEST_TYPES, TEST_RESULT} from '../filters/test_filters';\nimport { filter_method_by_number_of_times_tested, filter_by_coexecuted_methods } from '../filters/method_filters';\nimport { process_data, FunctionMap } from '../filters/data_processor';\nimport { sort_by_cluster_X, sort_by_cluster_Y, sort_by_coverage_X, sort_by_coverage_Y, sort_by_suspciousness, color_by_test_result, color_by_test_type} from '../filters/sorting';\n\nclass TestMatrixView extends Component {\n    constructor(props) {\n        super()\n        this.state = {\n            selectedProject: \"\",\n            data: {\n                x: [],\n                y: [],\n                edges: [],\n            },\n            history: [new FunctionMap()],\n            projects: [],\n            commits: [],\n            expanded: false,\n            reset: false,\n            isVisible: false,\n            currentMethod: \"\",\n            anchor: null,\n            current_method_id: '',\n            coloring: \"\"\n        }\n\n        this.backInTime = this.backInTime.bind(this);\n        this.reset = this.reset.bind(this);\n        this.onProjectChange = this.onProjectChange.bind(this);\n        this.updateReset = this.updateReset.bind(this);\n        this.setMethodAnchor = this.setMethodAnchor.bind(this);\n    }\n\n    async onProjectChange(event) {\n        let project_name = event.target.value;\n\n        fetchCoverage(project_name)\n            .then((data) => {\n                this.setState({\n                    data: {\n                        x: data.methods,\n                        y: data.tests,\n                        edges: data.edges,\n                    },\n                    history: [new FunctionMap()]\n                })\n            })\n            .catch(e => console.error(e));\n    }\n\n    async componentDidMount() {\n        let projects = await fetchProjects();\n        let project_name = projects[0].value;\n\n        let data = await fetchCoverage(project_name);\n\n        this.setState({\n            selectedProject: projects[0].value,\n            projects: projects,\n            data: {\n                x: data.methods,\n                y: data.tests,\n                edges: data.edges,\n            },\n            history: [new FunctionMap()]\n        })\n    }\n\n    backInTime() {\n        // Only allow to previous state if there is a previous state.\n        if (this.state.history.length <= 1) {\n            return;\n        }\n\n        const new_history = this.state.history.slice(0, this.state.history.length - 1);\n        this.setState({\n            history: new_history\n        })\n    }\n\n    reset() {\n        this.setState({\n            history: [new FunctionMap()]\n        })\n        this.setState({selectedProject: \"\", selectedCommit: \"\", reset: true});\n    }\n\n    updateReset(){\n        this.setState({reset: false});\n    }\n\n    setMethodAnchor(){\n        this.setState({anchor: null});\n    }\n\n    render() {\n        const history = this.state.history;\n        // check length of history here??\n        const current_filter_map = history[history.length - 1];\n\n        const current_state = process_data(this.state.data, current_filter_map)\n        const labelToggle = history.length > 1 ? true : false;\n\n        const handleChange = (panel) => (event, isExpanded) => {\n            const expanded = isExpanded ? panel : false;\n            this.setState({\n                expanded: expanded,\n            });\n        }\n        return (\n            <>\n            <div className='test-visualization'>    \n                    {((current_state.x.length >= 0) || (current_state.y.length >= 0)) &&\n                    <MatrixVisualization\n                        x={current_state.x}\n                        y={current_state.y}\n                        edges={current_state.edges}\n                        onMethodClick={(event, label) => {\n                            let new_filter_map = new FunctionMap(current_filter_map);\n                            new_filter_map.add_function(\"filter_by_coexecuted_methods\", filter_by_coexecuted_methods, label.to_string())\n\n                            this.setState({\n                                history: this.state.history.concat(new_filter_map)\n                            })\n                        }}\n                        onTestClick={(event, label) => {\n                            let new_filter_map = new FunctionMap(current_filter_map);\n                            new_filter_map.add_function(\"filter_by_coexecuted_tests\", filter_by_coexecuted_tests, label.to_string())\n\n                            this.setState({\n                                history: this.state.history.concat(new_filter_map)\n                            })\n                        }}\n                        onRightClick= {(event, label) => {\n                            event.preventDefault(); // to prevent regular context menu from apppearing\n\n                            this.setState({\n                                isVisible: true,\n                                currentMethod: label.to_string(),\n                                anchor: event.target,\n                                current_method_id: label.get_id()\n                            });\n                        }}\n                        labelToggle={labelToggle}\n                        xlabel={\"methods\"}\n                        ylabel={\"test cases\"} \n                        />\n                }\n                <div id='toolbox'>\n                    <h4>Toolbar</h4>\n                        <Accordion expanded={this.state.expanded === 'panel1'} onChange={handleChange('panel1')}>\n                            <AccordionSummary\n                                expandIcon={<ExpandMoreIcon />}\n                                aria-controls=\"panel1a-content\"\n                                id=\"data-set-selector\"\n                            >\n                                <span>Project Selection</span>\n                            </AccordionSummary>\n                            <AccordionDetails className=\"accordion-block\">\n                                <Menu title=\"Projects\"\n                                    onChange={this.onProjectChange}\n                                    entries={this.state.projects}\n                                    reset={this.state.reset}\n                                    updateReset={this.updateReset}\n                                    />\n                            </AccordionDetails>\n                        </Accordion>\n                        <Accordion expanded={this.state.expanded === 'panel2'} onChange={handleChange('panel2')}>\n                        <AccordionSummary\n                            expandIcon={<ExpandMoreIcon />}\n                            aria-controls=\"panel1a-content\"\n                            id=\"data-set-selector\"\n                        >\n                            <span>Sorting</span>\n                        </AccordionSummary>\n                        <AccordionDetails className=\"accordion-block\">\n                            <Menu\n                                title=\"Sort X-Axis\"\n                                onChange={(e) => {\n                                    let new_filter_map = new FunctionMap(current_filter_map);\n                                    let func = (data) => data\n                                    switch(e.target.value) {\n                                        case \"Coverage\":\n                                            func = sort_by_coverage_X;\n                                            break\n                                        case \"Cluster\":\n                                            func = sort_by_cluster_X;\n                                            break;\n                                        case \"Suspiciousness\":\n                                            func = sort_by_suspciousness;\n                                            break;\n                                        default:\n                                            break;\n                                    }\n                                    new_filter_map.add_function(\"sorting-x\", func);\n\n                                    this.setState({\n                                        history: this.state.history.concat(new_filter_map)\n                                    })\n                                }}\n                                entries={[\n                                { key: 0, value: \"Name\" },\n                                { key: 1, value: \"Coverage\" },\n                                { key: 2, value: \"Cluster\" },\n                                { key: 3, value: \"Suspiciousness\"}\n                                ]}\n                                reset={this.state.reset}\n                                updateReset={this.updateReset}\n                                />\n                            <Menu\n                                title=\"Sort Y-Axis\"\n                                onChange={(e) => {\n                                    let new_filter_map = new FunctionMap(current_filter_map);\n                                    let func = (data) => data\n                                    switch (e.target.value) {\n                                        case \"Coverage\":\n                                            func = sort_by_coverage_Y;\n                                            break\n                                        case \"Cluster\":\n                                            func = sort_by_cluster_Y;\n                                            break;\n                                        default:\n                                            break;\n                                    }\n                                    new_filter_map.add_function(\"sorting-y\", func);\n\n                                    this.setState({\n                                        history: this.state.history.concat(new_filter_map)\n                                    })\n                                }}\n                                entries={[\n                                    { key: 0, value: \"Name\" },\n                                    { key: 1, value: \"Coverage\" },\n                                    { key: 2, value: \"Cluster\" },\n                                ]} \n                                reset={this.state.reset}\n                                updateReset={this.updateReset}\n                                />\n                        </AccordionDetails>\n                    </Accordion>\n                    <Accordion expanded={this.state.expanded === 'panel3'} onChange={handleChange('panel3')}>\n                        <AccordionSummary\n                            expandIcon={<ExpandMoreIcon />}\n                            aria-controls=\"panel1a-content\"\n                            id=\"data-set-selector\">\n                            <span>Test Filters</span>\n                        </AccordionSummary>\n                        <AccordionDetails className=\"accordion-block\">\n                            <Menu title=\"Test Type\"\n                                entries={[{ key: 0, value: \"All\" }, { key: TEST_TYPES.UNIT, value: TEST_TYPES.UNIT }, { key: TEST_TYPES.INTEGRATION, value: TEST_TYPES.INTEGRATION }, { key: TEST_TYPES.SYSTEM, value: TEST_TYPES.SYSTEM }]}\n                                description={[\"Filter based on type of test:\",\n                                    \"- All: Present all tests.\",\n                                    \"- Unit: Only tests that cover methods within a single class.\",\n                                    \"- Integration: Only tests that cover methods across multiple classes in a single packages.\",\n                                    \"- System: Only tests that cover methods across multiple packages.\"\n                                ]}\n                                onChange={(event) => {\n                                    const test_type = event.target.value;\n                                    let new_filter_map = new FunctionMap(current_filter_map);\n                                    new_filter_map.add_function(\"filter_by_test_type\", filter_by_test_type, test_type)\n                                    new_filter_map.add_function(\"filter_method_by_number_of_times_tested\",\n                                        filter_method_by_number_of_times_tested, 1)\n\n                                    this.setState({\n                                        history: this.state.history.concat(new_filter_map)\n                                    })\n                                }} \n                                reset={this.state.reset}\n                                updateReset={this.updateReset}\n                                />\n                            <Menu title=\"Test Pass Filter\" \n                                entries={[\n                                    { key: 0, value: \"All\" },\n                                    { key: 1, value: TEST_RESULT.PASS },\n                                    { key: 2, value: TEST_RESULT.FAIL }\n                                ]}\n                                description={[\n                                    \"Filter based on the result of each test case:\",\n                                    \"- All: Present all test cases regardless on passed or failed\",\n                                    \"- Only Pass: Present only passed test cases\",\n                                    \"- Only Fail: Present only failed test cases\",\n                                ]}\n                                onChange={(event, index) => {\n                                    const test_result = event.target.value;\n                                    let new_filter_map = new FunctionMap(current_filter_map);\n                                    new_filter_map.add_function(\"filter_by_test_passed\", filter_by_test_passed, test_result)\n                                    new_filter_map.add_function(\"filter_method_by_number_of_times_tested\",\n                                        filter_method_by_number_of_times_tested, 1)\n                                    \n                                    this.setState({\n                                        history: this.state.history.concat(new_filter_map)\n                                    })\n                                }} \n                                reset={this.state.reset}\n                                updateReset={this.updateReset}\n                               />\n                            <FilterMenu title=\"Search Test:\" \n                                entries={current_state.y} \n                                onClick={(event) => {\n                                    const identifier = event.target.value;\n                                    let new_filter_map = new FunctionMap(current_filter_map);\n                                    new_filter_map.add_function(\"filter_by_coexecuted_tests\", filter_by_coexecuted_tests, identifier)\n                                    new_filter_map.add_function(\"filter_method_by_number_of_times_tested\",\n                                        filter_method_by_number_of_times_tested, 1)\n\n                                    this.setState({\n                                        history: this.state.history.concat(new_filter_map)\n                                    })\n                                \n                                }} />\n                        </AccordionDetails>\n                    </Accordion>\n                    <Accordion expanded={this.state.expanded === 'panel4'} onChange={handleChange('panel4')}>\n                        <AccordionSummary\n                            expandIcon={<ExpandMoreIcon />}\n                            aria-controls=\"panel1a-content\"\n                            id=\"data-set-selector\"\n                        >\n                            <span>Method Filters</span>\n                        </AccordionSummary>\n                        <AccordionDetails className=\"accordion-block\">\n                            <FilterMenu \n                                title=\"Search Method:\"\n                                entries={current_state.x}\n                                onClick={(event) => {\n                                    const identifier = event.target.value;\n                                    let new_filter_map = new FunctionMap(current_filter_map);\n                                    new_filter_map.add_function(\"filter_by_coexecuted_methods\", filter_by_coexecuted_methods, identifier)\n                                    new_filter_map.add_function(\"filter_method_by_number_of_times_tested\",\n                                        filter_method_by_number_of_times_tested, 1)\n\n                                    this.setState({\n                                        history: this.state.history.concat(new_filter_map)\n                                    })\n                                }} />\n                        </AccordionDetails>\n                    </Accordion>\n\n                    <Accordion expanded={this.state.expanded === 'panel5'} onChange={handleChange('panel5')}>\n                        <AccordionSummary\n                            expandIcon={<ExpandMoreIcon />}\n                            aria-controls=\"panel1a-content\"\n                            id=\"data-set-selector\"\n                        >\n                            <span>Color Schemes</span>\n                        </AccordionSummary>\n                        <AccordionDetails className=\"accordion-block\">\n                            <Menu title=\"Pick a Color Scheme:\" \n                                entries={[\n                                    { key: 0, value: \"Pass/Fail\" },\n                                    { key: 1, value: \"Unit/Integration/System\" },\n                                ]}\n                                onChange={(e, index) => {\n                                    \n                                    let new_filter_map = new FunctionMap(current_filter_map);\n                                    let func = (data) => data\n                                    switch (e.target.value) {\n                                        case \"Unit/Integration/System\":\n                                            func = color_by_test_type;\n                                            break\n                                        case \"Pass/Fail\":\n                                            func = color_by_test_result;\n                                            break;\n                                        default:\n                                            console.log(`${e.target.value} not yet supported`)\n                                            break;\n                                    }\n                                    new_filter_map.add_function(\"color-nodes\", func);\n\n                                    this.setState({\n                                        history: this.state.history.concat(new_filter_map)\n                                    })\n                                }}\n\n                                reset={this.state.reset}\n                                updateReset={this.updateReset}\n                               />\n                        </AccordionDetails>\n                    </Accordion>\n\n                    <ResultTextBox title=\"Methods\" entries={current_state.x}/>\n                    <ResultTextBox title=\"Tests\" entries={current_state.y}/>\n\n                    <div id=\"control-tools\">\n                        <button onClick={this.backInTime}>Back</button>\n                        <button onClick={this.reset}>Reset</button>\n                    </div>\n                </div> \n\n            </div>\n            </>\n        )\n    }\n}\n\nexport default TestMatrixView;","import React from 'react';\nimport './Footer.scss'\n\nclass Footer extends React.Component {\n    render() {\n        return (\n            <div className='footer'>\n                <div><a href=\"http://spideruci.org\"><img alt=\"spideruci.org\" src=\"spider_circle_red.svg\" /></a></div>\n                <div><a href=\"https://github.com/spideruci\"><img alt=\"github.com/spideruci\" src=\"./GitHub-Mark-32px.png\" /></a></div>\n            </div>    \n        )\n    }\n}\n\nexport default Footer;","import React from 'react';\nimport './Header.scss'\n\nconst Header = (props) => {\n    return (\n        <div className='header'>\n            <h1>{ props.title }</h1>\n        </div>\n    )\n}\n\n\nexport default Header;","import React from \"react\";\nimport \"./navbar.scss\";\nimport { Link } from \"react-router-dom\";\nimport Header from \"./Header\";\n\nconst Navbar = () => {\n  return (\n    <nav>\n      <Link to=\"/\">\n        <Header title=\"Morpheus\" />\n      </Link>\n      <ul>\n        <li>\n          <Link to=\"/about\">About</Link>\n        </li>\n        <li>\n          <Link to=\"/visualization\">Visualization</Link>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import React from 'react';\nimport {\n  Route,\n  BrowserRouter as Router,\n  Switch\n} from 'react-router-dom';\nimport About from './components/routes/About';\nimport TestMatrixView from './components/routes/TestMatrixView';\nimport Footer from './components/common/Footer';\nimport Navbar from './components/common/navbar';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className='app'>\n      \n      <Router basename={process.env.PUBLIC_URL}>\n        <Navbar />\n        <div className=\"component\">\n          <Switch>\n            <Route exact path=\"/\" component={TestMatrixView} />\n            <Route path=\"/about\" component={About} />\n            <Route path=\"/visualization\" component={TestMatrixView} />\n          </Switch>\n        </div>\n      </Router>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom'\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}